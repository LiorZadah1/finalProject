/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VotingSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addVoter"
      | "castVote"
      | "createVote"
      | "getAccessibleVotes"
      | "getOptionDetails"
      | "getOptionsCount"
      | "getVoteResults"
      | "nextVoteID"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addVoter",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVote",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessibleVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionDetails",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteResults",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextVoteID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "votes", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccessibleVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextVoteID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
}

export interface VotingSystem extends BaseContract {
  connect(runner?: ContractRunner | null): VotingSystem;
  waitForDeployment(): Promise<this>;

  interface: VotingSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addVoter: TypedContractMethod<
    [voteID: BigNumberish, voterAddress: AddressLike, groupId: BigNumberish],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [voteID: BigNumberish, optionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  createVote: TypedContractMethod<
    [
      voteID: BigNumberish,
      voteName: string,
      startTime: BigNumberish,
      duration: BigNumberish,
      groupId: BigNumberish,
      voting_options: string[]
    ],
    [void],
    "nonpayable"
  >;

  getAccessibleVotes: TypedContractMethod<
    [groupId: BigNumberish],
    [
      [bigint[], string[], bigint[], bigint[], boolean[]] & {
        voteIDs: bigint[];
        voteNames: string[];
        startVoteTimes: bigint[];
        endVoteTimes: bigint[];
        openStatuses: boolean[];
      }
    ],
    "nonpayable"
  >;

  getOptionDetails: TypedContractMethod<
    [voteID: BigNumberish, optionIndex: BigNumberish],
    [[string, bigint] & { optionName: string; countOption: bigint }],
    "view"
  >;

  getOptionsCount: TypedContractMethod<
    [voteID: BigNumberish],
    [bigint],
    "view"
  >;

  getVoteResults: TypedContractMethod<
    [voteID: BigNumberish, optionsCount: BigNumberish],
    [bigint[]],
    "view"
  >;

  nextVoteID: TypedContractMethod<[], [bigint], "view">;

  votes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean] & {
        voteName: string;
        voteID: bigint;
        startVoteTime: bigint;
        endVoteTime: bigint;
        groupId: bigint;
        optionsCount: bigint;
        open: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addVoter"
  ): TypedContractMethod<
    [voteID: BigNumberish, voterAddress: AddressLike, groupId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [voteID: BigNumberish, optionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVote"
  ): TypedContractMethod<
    [
      voteID: BigNumberish,
      voteName: string,
      startTime: BigNumberish,
      duration: BigNumberish,
      groupId: BigNumberish,
      voting_options: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccessibleVotes"
  ): TypedContractMethod<
    [groupId: BigNumberish],
    [
      [bigint[], string[], bigint[], bigint[], boolean[]] & {
        voteIDs: bigint[];
        voteNames: string[];
        startVoteTimes: bigint[];
        endVoteTimes: bigint[];
        openStatuses: boolean[];
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOptionDetails"
  ): TypedContractMethod<
    [voteID: BigNumberish, optionIndex: BigNumberish],
    [[string, bigint] & { optionName: string; countOption: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOptionsCount"
  ): TypedContractMethod<[voteID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoteResults"
  ): TypedContractMethod<
    [voteID: BigNumberish, optionsCount: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextVoteID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean] & {
        voteName: string;
        voteID: bigint;
        startVoteTime: bigint;
        endVoteTime: bigint;
        groupId: bigint;
        optionsCount: bigint;
        open: boolean;
      }
    ],
    "view"
  >;

  filters: {};
}
